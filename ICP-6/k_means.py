# -*- coding: utf-8 -*-
"""K-Means.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UdrMAG4RDLoB7G-0GdCNVEVuKslUBbXM
"""

import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.preprocessing import LabelEncoder, StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="white", color_codes=True)
# import warnings
# warnings.filterwarnings("ignore")

dataset = pd.read_csv('CC.csv')

print(dataset.dtypes)
print("_______________________________________________________________________")


x = dataset
print("_______________________________________________________________________")

# see how many samples we have of each species
print(dataset["TENURE"].value_counts())
print("_______________________________________________________________________")
## Printing the count of Null values
nulls = pd.DataFrame(x.isnull().sum().sort_values(ascending=False)[:25])
nulls.columns = ['Null Count']
nulls.index.name = 'Feature'
print("Identifying nulls",nulls)
print("_______________________________________________________________________")

## Replacing null values with mean values
x = x.select_dtypes(include=[np.number]).interpolate().dropna()

## Verifying Null values after replacing it with the mean value
nulls = pd.DataFrame(x.isnull().sum().sort_values(ascending=False)[:25])
nulls.columns = ['Null Count']
nulls.index.name = 'Feature'
print("After Null Replaceing with Mean value:",nulls)
print("_______________________________________________________________________")


# Building the k-means algorithm
from sklearn.cluster import KMeans
nclusters = 3 # this is the k in kmeans
km = KMeans(n_clusters=nclusters)
km.fit(x)

# predict the cluster for each data point
y_cluster_kmeans = km.predict(x)
from sklearn import metrics
score = metrics.silhouette_score(x, y_cluster_kmeans)
print("Silhoutte Score: " + str(score))

# elbow method to know the number of clusters
wcss = []
for i in range(1,11):
    kmeans = KMeans(n_clusters=i,init='k-means++',max_iter=300,n_init=10,random_state=0)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)
plt.plot(range(1,11),wcss)
plt.title('the elbow method')
plt.xlabel('Number of Clusters')
plt.ylabel('Wcss')
plt.show()